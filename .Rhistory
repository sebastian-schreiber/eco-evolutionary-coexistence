} }
hist(pop.mtx[10,], xlab = "number infected in generation 10", ylab = "frequency", main = "Partial Absolute Control Histogram")
warnings
warning()
notquar = rbinom(n = pop.mtx[j,i], size = reps, prob = 1-q) # individuals not quarantined
notquar
rm(list = ls()) # clears everything out
load("SARS.Rdata")
reps = 1000 # number of times to simulate the outbreak
q = 0.4 # proportion of individuals that will be quarantined
gen = 10 # number of generations
pop.mtx = matrix(0, nrow = gen, ncol = reps) # create an empty matrix
pop.mtx[1,] = 1 # initialize the outbreak as one infected individual for the first generation
### partial absolution control loop
# Part A
for (i in 1:reps){
for (j in 1:(gen - 1)){
notquar = rbinom(n = pop.mtx[j,i], size = 1, prob = 1-q) # individuals not quarantined
if(notquar>0)pop.mtx[j+1,i] = sum(sample(SARS, size = notquar, replace = TRUE)) # sample from SARS data to determine number of people infected for each individual in notquar
} }
hist(pop.mtx[10,], xlab = "number infected in generation 10", ylab = "frequency", main = "Partial Absolute Control Histogram")
notquar
rm(list = ls()) # clears everything out
load("SARS.Rdata")
reps = 1000 # number of times to simulate the outbreak
q = 0.4 # proportion of individuals that will be quarantined
gen = 10 # number of generations
pop.mtx = matrix(0, nrow = gen, ncol = reps) # create an empty matrix
pop.mtx[1,] = 1 # initialize the outbreak as one infected individual for the first generation
### partial absolution control loop
# Part A
for (i in 1:reps){
for (j in 1:(gen - 1)){
if(pop.mtx[j,i]>0)notquar = rbinom(n = pop.mtx[j,i], size = 1, prob = 1-q) # individuals not quarantined
if(notquar>0)pop.mtx[j+1,i] = sum(sample(SARS, size = notquar, replace = TRUE)) # sample from SARS data to determine number of people infected for each individual in notquar
} }
hist(pop.mtx[10,], xlab = "number infected in generation 10", ylab = "frequency", main = "Partial Absolute Control Histogram")
warnings()
rm(list = ls()) # clears everything out
load("SARS.Rdata")
reps = 1000 # number of times to simulate the outbreak
q = 0.4 # proportion of individuals that will be quarantined
gen = 10 # number of generations
pop.mtx = matrix(0, nrow = gen, ncol = reps) # create an empty matrix
pop.mtx[1,] = 1 # initialize the outbreak as one infected individual for the first generation
### partial absolution control loop
# Part A
for (i in 1:reps){
for (j in 1:(gen - 1)){
if(pop.mtx[j,i]>0)notquar = rbinom(n = 1, size = pop.mtx[j,i], prob = 1-q) # individuals not quarantined
if(notquar>0)pop.mtx[j+1,i] = sum(sample(SARS, size = notquar, replace = TRUE)) # sample from SARS data to determine number of people infected for each individual in notquar
} }
hist(pop.mtx[10,], xlab = "number infected in generation 10", ylab = "frequency", main = "Partial Absolute Control Histogram")
#Assignment 7 - The Storage Effect
#Carter Johnson
#ECL233 Winter 2017
# To understand when all species coexist, it is useful to look
# at the stochastic growth rate of each species when rare.
# This growth rate for, say species 1, is given by running the
# simulation without species 1 and computing the average of
# the following quantity
# log(1-d+d*kids[1]/sum(kids*N[t-1,]))
# during the simulation. For the assignment, compute
# stochastic growth rates when rare for each species in the
# community when (i) Sigma=diag(10) and
# (ii) Sigma=diag(10)*0.5+0.5.
# Create a pair of barplots in a single figure showing
# these stochastic growth rates for all the species.
# HINT: To make the simulations run a bit faster,
# it isn't necessary to store N at every point in time,
# just keep track of the current vector N of population frequencies
#clear workspace
rm(list=ls())
#load MASS library for multivariate normals
library("MASS")
#function to compute stochastic growth rates by doing lottery model simulation
#with leaving out species left_out
lottery_leave_one_out=function(k=10,N0=rep(0.1,10),Sigma=diag(10),mu=seq(1,1.25,length=10),Tf=100,d=0.1,left_out){
#implements the lottery function leaving out species k
#to calculate the stochastic growth rate of species k
N0[left_out]=0
N_old=N0 # initial values
quantity=rep(0,Tf-1)
for(t in 2:Tf){ # starting the loop
kids=exp(mvrnorm(n=1,mu=mu,Sigma=Sigma)) # random draw creating the lognormal number of kids
N_new=(1-d)*N_old+d*kids*N_old/sum(kids*N_old) # determining the next community state
quantity[t-1] = log(1-d+d*kids[left_out]/sum(kids*N_old))
N_old <- N_new
}
gr=mean(quantity)
return(gr) # returning the stochastic growth rate
}
#(i) Sigma=diag(10)
gr1 = rep(0,10)
for (i in 1:10){
gr1[i]=lottery_leave_one_out(Sigma=diag(10),Tf=10000,left_out=i)
}
#(ii) Sigma=diag(10)*0.5+0.5.
gr2 = rep(0,10)
for (i in 1:10){
gr2[i]=lottery_leave_one_out(Sigma=(diag(10)*0.5+0.5),Tf=10000,left_out=i)
}
#plot pair of barplots
pdf(file="stoch_growth_rates.pdf")
par(mfrow=c(2,1))
par(mar = rep(4, 4))
barplot(gr1, xlab="species", ylab="stochastic growth rate", main="Sigma=diag(10)")
barplot(gr2, xlab="species", ylab="stochastic growth rate", main="Sigma=diag(10)*0.5+0.5")
dev.off()
# HW ASSIGNMENT
#Julea Shaw
#Load required package
library("MASS")
###Pseudocode###
#1 Create matrix to initialize species with one species removed at a time
#2 Write lottery function
#Add matrix to store number of kids, vector to hold calculated stochastic growth rates, and equation to calc growth rate
#3 Run for 10000 time steps and for different sigmas
#4 Create side by side bar plots
#Create matrix with initializations (one species removed at a time)
N0.mat = matrix (1/9,nrow = 10, ncol =10)
diag(N0.mat)=0
N0 = N0.mat
#Write lottery function and add calculation of stochastic growth rate
lottery=function(k=10,Sigma=diag(10),mu=seq(1,1.25,length=10),Tf=100,d=0.1){
mean.growth = rep(NA,k) #empty vector to hold growth rate for each species
for(n in 1:k){
N=matrix(0,Tf,k) # matrix which will be filled in
N[1,]=N0[n,] # initial values
kidm = matrix(0,Tf-1,k) #matrix to hold number of kids
for(t in 2:Tf){ # starting the loop
kidm[t-1,]=exp(mvrnorm(n=1,mu=mu,Sigma=Sigma)) # random draw creating the lognormal number of kids
N[t,]=(1-d)*N[t-1,]+d*kidm[t-1,]*N[t-1,]/sum(kidm[t-1,]*N[t-1,]) # determining the next community state
}
mean.growth[n] =mean(log(1-d+d*kidm[,n]/rowSums(kidm*N[-Tf,])))
}
return(mean.growth) # returning the simulation
}
#Run function for Sigma=diag(10) and Tf = 10000
run1 = lottery(Tf=10000)
#Run function Sigma = diag(10)*0.5 + 0.5 and Tf = 10000
run2 = lottery(Sigma = diag(10)*0.5+0.5,Tf=10000)
#Create barplots of stochastic growth rate for each species
par(mfrow=c(1,2))
barplot(run1, main = "Sigma = diag(10)",ylab = "growth rate", xlab = "species", ylim=c(-0.01, 0.03))
barplot(run2, main = "Sigma = diag(10)*0.5+0.5",ylab = "growth rate", xlab = "species",  ylim=c(-0.01, 0.03))
50+120
170/24
170/20
50/8
120/8
168/24
#Set fit function with alpha normalized to 30
fit = function(x, R){
alpha = log(R)/30
x*R*exp(- alpha * x)
}
fit = function(x, R){
alpha = log(R)/30
x*R*exp(- alpha * x)
}
k = 100 #Limit size of Q matrix
Rs = seq(from = 1, to = 20) #Define R values to run through
ext.vec = rep(NA,length(Rs)) #Empty matrix to hold output (MTE)
#For loop with R values
for(r in 1: length(Rs)){
Q = matrix(NA, k,k)
for(i in 1:k){
Q[i, ]=dpois(1:k, lambda = fit(i,Rs[r]))
}
estuff = eigen(t(Q))
dom = Re(estuff$value[1]) #Re makes it a real value
ext = 1/(1-dom)
ext.vec[r] = ext
}
ext.vec
plot(Rs, log(ext.vec), type = "l", ylim = c(0, log(60000)), ylab = "Mean time to extinction", xlab = "Finite rate of extinction (R)" )
k = 100
Rs = seq(from = 1, to = 20, by = 0.5)
ext.vec = rep(NA,length(Rs))
for(r in 1: length(Rs)){
Q = matrix(NA, k,k)
for(i in 1:k){
Q[i, ]=dnbinom(1:k, size= 0.5, mu = fit(i,Rs[r]))
}
estuff = eigen(t(Q))
dom = Re(estuff$value[1]) #Re makes it a real value
ext = 1/(1-dom)
ext.vec[r] = ext
}
lines(Rs, log(ext.vec), type = "l", ylim = c(log(2), log(60000)), col = "red")
max(ext.vec)
?rnbinom
A=rbind(c(0,1.5),c(0.75,0.75))
eigen(t(A))
w=eigen(t(A))$vectors[,1]
w
w=w/sum(w)
w
sum(w/2)
system.time(sample.int(n=6,size = 10000000,replace = TRUE))
system.time(sample(1:6,size = 10000000,replace = TRUE))
rm(list = ls()) # clears everything out
require(deSolve)
SIRdet=function(t,x,parms){
with(as.list(c(parms,x)),{
dS=p*(N-S)-R0*S*I/N
dI=R0*S*I/N-I
return(list(c(dS,dI)))
})
}
rm(list = ls()) # clears everything out
require(deSolve)
parms=list(p=0.5,R0=2.0,N=100)
SIRdet=function(t,x,parms){
with(as.list(c(parms,x)),{
dS=p*(N-S)-R0*S*I/N
dI=R0*S*I/N-I
return(list(c(dS,dI)))
})
}
as.integer(1.1)
as.integer(1.7)
dN=cbind(c(1,0,0),c(-1,0,0),c(-1,1,0),c(0,-1,1),c(0,-1,0),
c(0,0,-1))
dN
R0=2
N=100
I0=1
tf=100
p=0.5
if(p>1)stop("probability can not be >1")
N=as.interger(N)
I0=as.integer(I0)
if(I0>N)stop("dumb ass")
S0=N-I0
Rec0=0
alpha=1-p
SIR=as.matrix(c(S0,I0,Rec0))
tstep=1
vt=0
dN=cbind(c(1,0,0),c(-1,0,0),c(-1,1,0),c(0,-1,1),c(0,-1,0),
c(0,0,-1))
vt[1]
c(S,I,R)=c(0,0,0)
c("S")=1
SIRstoch=function(R0,p,N,I0,tf=100){
if(p>1)stop("probability can not be >1")
N=as.interger(N)
I0=as.integer(I0)
if(I0>N)stop("dumb ass")
S0=N-I0
Rec0=0
alpha=1-p
SIR=as.matrix(c(S0,I0,Rec0))
tstep=1
vt=0
dN=cbind(c(1,0,0),c(-1,0,0),c(-1,1,0),c(0,-1,1),c(0,-1,0),
c(0,0,-1))
nOut=ncol(dN)
while(vt[tstep]<tf){
rates=c(p*sum(SIR[,tstep]),
p*SIR[1,tstep],
R0*SIR[1,tstep]*SIR[2,tstep]/sum(SIR[,tstep]),
alpha*SIR[2,tstep],
p*SIR[2,tstep],
p*SIR[3,tstep])
tot.rate=sum(rates)
vt=c(vt,rexp(n = 1,rate = tot.rate))
what.happened=sample.int(n = 1,prob = rates/tot.rate)
SIR=cbind(SIR,SIR[,tstep]+dN[,what.happened])
tstep=tstep+1
}
return(list(vt=vt,SIR=SIR))
}
out=SIRstoch(R0=2,p=0.4,N=100,I0=1)
SIRstoch=function(R0,p,N,I0,tf=100){
if(p>1)stop("probability can not be >1")
N=as.integer(N)
I0=as.integer(I0)
if(I0>N)stop("dumb ass")
S0=N-I0
Rec0=0
alpha=1-p
SIR=as.matrix(c(S0,I0,Rec0))
tstep=1
vt=0
dN=cbind(c(1,0,0),c(-1,0,0),c(-1,1,0),c(0,-1,1),c(0,-1,0),
c(0,0,-1))
nOut=ncol(dN)
while(vt[tstep]<tf){
rates=c(p*sum(SIR[,tstep]),
p*SIR[1,tstep],
R0*SIR[1,tstep]*SIR[2,tstep]/sum(SIR[,tstep]),
alpha*SIR[2,tstep],
p*SIR[2,tstep],
p*SIR[3,tstep])
tot.rate=sum(rates)
vt=c(vt,rexp(n = 1,rate = tot.rate))
what.happened=sample.int(n = 1,prob = rates/tot.rate)
SIR=cbind(SIR,SIR[,tstep]+dN[,what.happened])
tstep=tstep+1
}
return(list(vt=vt,SIR=SIR))
}
out=SIRstoch(R0=2,p=0.4,N=100,I0=1)
SIRstoch=function(R0,p,N,I0,tf=100){
if(p>1)stop("probability can not be >1")
N=as.integer(N)
I0=as.integer(I0)
if(I0>N)stop("dumb ass")
S0=N-I0
Rec0=0
alpha=1-p
SIR=as.matrix(c(S0,I0,Rec0))
tstep=1
vt=0
dN=cbind(c(1,0,0),c(-1,0,0),c(-1,1,0),c(0,-1,1),c(0,-1,0),
c(0,0,-1))
nOut=ncol(dN)
while(vt[tstep]<tf){
rates=c(p*sum(SIR[,tstep]),
p*SIR[1,tstep],
R0*SIR[1,tstep]*SIR[2,tstep]/sum(SIR[,tstep]),
alpha*SIR[2,tstep],
p*SIR[2,tstep],
p*SIR[3,tstep])
tot.rate=sum(rates)
vt=c(vt,rexp(n = 1,rate = tot.rate))
what.happened=sample.int(n = 6,prob = rates/tot.rate)
SIR=cbind(SIR,SIR[,tstep]+dN[,what.happened])
tstep=tstep+1
}
return(list(vt=vt,SIR=SIR))
}
out=SIRstoch(R0=2,p=0.4,N=100,I0=1)
if(p>1)stop("probability can not be >1")
N=as.integer(N)
I0=as.integer(I0)
if(I0>N)stop("dumb ass")
S0=N-I0
Rec0=0
alpha=1-p
SIR=as.matrix(c(S0,I0,Rec0))
tstep=1
vt=0
dN=cbind(c(1,0,0),c(-1,0,0),c(-1,1,0),c(0,-1,1),c(0,-1,0),
c(0,0,-1))
nOut=ncol(dN)
rates=c(p*sum(SIR[,tstep]),
p*SIR[1,tstep],
R0*SIR[1,tstep]*SIR[2,tstep]/sum(SIR[,tstep]),
alpha*SIR[2,tstep],
p*SIR[2,tstep],
p*SIR[3,tstep])
rates
tot.rate=sum(rates)
tot.rate
vt=c(vt,rexp(n = 1,rate = tot.rate))
vt
what.happened=sample.int(n = 6,prob = rates/tot.rate)
what.happened=sample(1:6,prob = rates/tot.rate)
rates
rmultinom(n=1,size=6,prob=rates/tot.rate)
rmultinom(n=6,size=1,prob=rates/tot.rate)
rates/tot.rate
sample(1:6,prob=rates/tot.rate)
rates=c(p*sum(SIR[,tstep]),
p*SIR[1,tstep],
R0*SIR[1,tstep]*SIR[2,tstep]/sum(SIR[,tstep]),
alpha*SIR[2,tstep],
p*SIR[2,tstep],
p*SIR[3,tstep])+0.0001
what.happened=sample.int(n = 6,prob = rates/tot.rate)
SIR=cbind(SIR,SIR[,tstep]+dN[,what.happened])
tstep=tstep+1
SIRstoch=function(R0,p,N,I0,tf=100){
if(p>1)stop("probability can not be >1")
N=as.integer(N)
I0=as.integer(I0)
if(I0>N)stop("dumb ass")
S0=N-I0
Rec0=0
alpha=1-p
SIR=as.matrix(c(S0,I0,Rec0))
tstep=1
vt=0
dN=cbind(c(1,0,0),c(-1,0,0),c(-1,1,0),c(0,-1,1),c(0,-1,0),
c(0,0,-1))
nOut=ncol(dN)
while(vt[tstep]<tf){
rates=c(p*sum(SIR[,tstep]),
p*SIR[1,tstep],
R0*SIR[1,tstep]*SIR[2,tstep]/sum(SIR[,tstep]),
alpha*SIR[2,tstep],
p*SIR[2,tstep],
p*SIR[3,tstep])+0.0001
tot.rate=sum(rates)
vt=c(vt,rexp(n = 1,rate = tot.rate))
what.happened=sample.int(n = 6,prob = rates/tot.rate)
SIR=cbind(SIR,SIR[,tstep]+dN[,what.happened])
tstep=tstep+1
}
return(list(vt=vt,SIR=SIR))
}
out=SIRstoch(R0=2,p=0.4,N=100,I0=1)
?sample
parms=c(R0=R0,p=p,N=N)
parms
stochOUT=SIRstoch(R0=R0,p=p,N=N,I0=I0,tf=100)
stochOUT=SIRstoch(R0=R0,p=p,N=N,I0=I0,tf=100)
SIRstoch=function(R0,p,N,I0,tf=100){
if(p>1)stop("probability can not be >1")
N=as.integer(N)
I0=as.integer(I0)
if(I0>N)stop("dumb ass")
S0=N-I0
Rec0=0
alpha=1-p
SIR=as.matrix(c(S0,I0,Rec0))
tstep=1
vt=0
dN=cbind(c(1,0,0),c(-1,0,0),c(-1,1,0),c(0,-1,1),c(0,-1,0),
c(0,0,-1))
nOut=ncol(dN)
while(vt[tstep]<tf){
rates=c(p*sum(SIR[,tstep]),
p*SIR[1,tstep],
R0*SIR[1,tstep]*SIR[2,tstep]/sum(SIR[,tstep]),
alpha*SIR[2,tstep],
p*SIR[2,tstep],
p*SIR[3,tstep])
tot.rate=sum(rates)
vt=c(vt,rexp(n = 1,rate = tot.rate))
what.happened=sample.int(n = 6,prob = rates/tot.rate)
SIR=cbind(SIR,SIR[,tstep]+dN[,what.happened])
tstep=tstep+1
}
return(list(vt=vt,SIR=SIR))
}
#
R0=8
p=0.04
N=1000
I0=floor(0.01*N)
#
stochOUT=SIRstoch(R0=R0,p=p,N=N,I0=I0,tf=100)
parms=c(R0=R0,p=p,N=N)
x0=c(S=N-I0,I=I0)
detOut=as.data.frame(lsoda(x0,strochOUT$vt,SIRdet,parms))
parms=c(R0=R0,p=p,N=N)
x0=c(S=N-I0,I=I0)
detOut=as.data.frame(lsoda(x0,stochOUT$vt,SIRdet,parms))
parms=c(R0=R0,p=p,N=N)
x0=c(S=N-I0,I=I0)
detOut=as.data.frame(lsoda(x0,1:100,SIRdet,parms))
plot(1:100,detOut$N[1,])
setwd("~/Dropbox/research/active/Eco-Evo/Exp and App Competition/R CODE")
source("base-code-final.R")
parms=list(b=1,K=400,d=0.2,delta=c(0.1,0.1),
a=rbind(c(1,2),c(2,1),c(1.5,1.5))/25,
c=rbind(c(0.2,0.2),c(0.2,0.2),c(0.2,0.2)))
# Varying ecological pleiotropy
h=1.5
out1=blahblah(h=h)
# Varying dominance and then K
out2=blahblahh()
out3=blahblahK(0.46)
pdf("bifurcations.pdf",height=5,width=5)
par(cex.lab=1.25,cex.axis=1.25,mar=c(4,4.5,2,1))
layout(matrix(c(1,2,3),nrow = 3,ncol=1),heights = c(1.2,1.2,1.2))
x=-log(out1$c1/0.2)
y=cbind(out1$p1mins,out1$p1maxs,out1$a1mins,out1$a1maxs)
temp=max(which(out1$p1min>0.6))+3
temp2=length(out1$p1min)
matplot(x,y[,c(2,4)],type="l",col=cols[c(1,3)],lty=c(2,1),
xlab=expression(paste("mean pleiotropy ",(alpha[1]+alpha[2])/2)),
ylab="",ylim=c(0,1),
lwd=2)
matplot(x[temp:temp2],y[temp:temp2,c(1,3)],add=TRUE,
col=cols[c(1,3)],lty=c(2,1),type="l",lwd=2)
legend("bottomleft",c("prey allele 1","predator 1"),
col=cols[c(1,3)],lwd=2,lty=c(2,1),bty="n")
abline(v=x[temp],lty=2)
abline(v=-0.12,lty=2)
text(-1,0.8,"bistability")
text(-0.4,0.5,"intransitive\nexclusion")
text(0.25,0.9,"coexistence")
legend("topright","A",bty="n",cex=1.25)
x=log(out2$hs/(1-out2$hs))
y=cbind(out2$p1mins,out2$p1maxs,out2$a1mins,out2$a1maxs)
matplot(x,y,type="l",col=cols,lty=c(2,2,1,1),
xlab=expression(paste("mean dominance  ",(beta[1]+beta[2])/2)),
ylab="min/max frequency",ylim=c(0,1),
lwd=2)
abline(v=log(0.9),lty=2)
text(log(0.85),0.5,"intransitive\nexclusion.")
text(log(1.1),0.9,"coexistence")
legend("topright","B",bty="n",cex=1.25)
x=out3$Ks
y=cbind(out3$p1mins,out3$p1maxs,out3$a1mins,out3$a1maxs)
matplot(x,y,type="l",col=cols,lty=c(2,2,1,1),
xlab=expression(paste("Prey carrying capacity ",K)),
ylab="",ylim=c(0,1),
lwd=2)
text(30,0.5,"coexistence")
text(80,0.5,"intransitive\n exclusion")
abline(v=45,lty=2)
legend("topright","C",bty="n",cex=1.25)
dev.off()
15+48
15+48-36
